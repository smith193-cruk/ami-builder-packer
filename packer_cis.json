{
  "variables": {
    "vpc": "{{env `BUILD_VPC_ID`}}",
    "subnet": "{{env `BUILD_SUBNET_ID`}}",
    "aws_region": "{{env `AWS_REGION`}}",
    "ami_name": "Prod-CIS-Latest-Ubuntu-{{isotime \"02-Jan-06 03_04_05\"}}"
  },
  "builders": [{
    "name": "AWS AMI Builder - CIS",
    "type": "amazon-ebs",
    "region": "{{user `aws_region`}}",
    "source_ami_filter": {
      "filters": {
        "architecture": "x86_64",
        "virtualization-type": "hvm",
        "root-device-type": "ebs",
        "name": "ubuntu/images/*/ubuntu-bionic-18.04*"
      },
      "owners": ["099720109477"],
      "most_recent": true
    },
    "instance_type": "t2.micro",
    "ssh_username": "ubuntu",
    "ami_name": "{{user `ami_name` | clean_ami_name}}",
    "tags": {
      "Name": "{{user `ami_name`}}"
    },
    "run_tags": {
      "Name": "{{user `ami_name`}}"
    },
    "run_volume_tags": {
      "Name": "{{user `ami_name`}}"
    },
    "snapshot_tags": {
      "Name": "{{user `ami_name`}}"
    },
    "ami_description": "Ubuntu CIS with Cloudwatch Logs agent",
    "associate_public_ip_address": "true",
    "vpc_id": "{{user `vpc`}}",
    "subnet_id": "{{user `subnet`}}"
  }],
  "provisioners": [{
      "type": "shell",
      "inline": [
        "while [ $(grep --count ec2 /etc/apt/sources.list) -eq 0 ] ; do echo 'waiting for cloud-init to update sources.list' ; sleep 1; done",
        "cat /etc/issue",
        "uname --all",
        "sudo apt-get --quiet update",
        "sudo DEBIAN_FRONTEND=noninteractive apt-get --quiet --assume-yes --no-install-recommends --show-upgraded upgrade",
        "sudo DEBIAN_FRONTEND=noninteractive apt-get --quiet --assume-yes --no-install-recommends install python3-pip python3-setuptools",
        "sudo pip3 install 'ansible>=2.8.0,<3.0'"
      ]
    },
    {
      "type": "ansible-local",
      "playbook_file": "ansible/playbook.yaml",
      "role_paths": [
        "ansible/roles/common"
      ],
      "playbook_dir": "ansible",
      "galaxy_file": "ansible/requirements.yaml"
    },
    {
      "type": "shell",
      "inline": [
        "rm .ssh/authorized_keys ; sudo rm /root/.ssh/authorized_keys"
      ]
    }
  ]
}
